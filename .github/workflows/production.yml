name: "Build and Deploy to Production"
on:
  push:
    tags:
      - "v*"
jobs:
  docker:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Submodules
        run: git submodule update --init --recursive --remote
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Set Version
        run: sed -i s/v0.0.0-canary/${GITHUB_REF#refs/tags/}/g package.json
      - name: Build
        run: yarn && yarn build
      - name: Docker login
        run: echo ${{ secrets.PAT }} | docker login ghcr.io --username yomanz --password-stdin
      - name: Docker build
        run: docker build -t ghcr.io/widgetbot-io/embed:${GITHUB_REF#refs/tags/} .
      - name: Docker push tag latest
        run: docker push ghcr.io/widgetbot-io/embed:${GITHUB_REF#refs/tags/}
  sentry-release:
    name: Release on Sentry
    runs-on: ubuntu-latest
    env:
      SENTRY_PROJECT: embed
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_URL: ${{ secrets.SENTRY_URL }}
    steps:
      - name: Use actions/checkout@v2
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Submodules
        run: git submodule update --init --recursive --remote
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        with:
          version: ${{ github.ref }}